generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model StockSymbol {
  id          Int                @id @default(autoincrement())
  isin        String             @unique
  symbol      String             @unique
  companyName String?
  industry    String?
  series      String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @default(now()) @updatedAt
  historicals HistoricalData1D[] @relation("SymbolToHistory")
}

model HistoricalData1D {
  id           Int         @id @default(autoincrement())
  symbol       String
  date         DateTime
  openPrice    Float?
  closePrice   Float?
  highPrice    Float?
  lowPrice     Float?
  volume       BigInt?
  openInterest BigInt?
  createdAt    DateTime    @default(now())
  stockSymbol  StockSymbol @relation("SymbolToHistory", fields: [symbol], references: [symbol])

  @@unique([symbol, date])
  @@index([symbol])
  @@index([date])
}

model User {
  email             String    @unique
  createdAt         DateTime  @default(now())
  photoURL          String?
  updatedAt         DateTime  @updatedAt
  id                Int       @id @default(autoincrement())
  firebaseUid       String    @unique
  name              String?
  dateOfBirth       DateTime?
  firebaseCreatedAt DateTime
  isVerified        Boolean   @default(false)
  lastLogin         DateTime?
  loginCount        Int       @default(0)
  phoneNumber       String?
  postgresCreatedAt DateTime  @default(now())
  role              Role      @default(COMMON_USER)
}

enum Role {
  ADMIN
  COMMON_USER
}

model SMA_Results {
  id             Int      @id @default(autoincrement())
  symbol         String
  sma_period     Int
  threshold_pct  Float
  close_price    Float
  sma_value      Float
  deviation_pct  Float
  date_generated DateTime @default(now())

  @@index([sma_period])
  @@index([sma_period, deviation_pct])
  @@index([symbol])
  @@map("SMA_Results") // exact DB table name
}
